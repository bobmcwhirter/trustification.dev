{{ if .Values.keycloak.enabled }}
kind: Job
apiVersion: batch/v1
metadata:
  name: post-install-keycloak
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "0"
    helm.sh/hook-weight: "5"
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
  labels:
    app.kubernetes.io/name: post-install-keycloak-config
    app.kubernetes.io/component: sso
    app.kubernetes.io/part-of: sso
spec:
  backoffLimit: 1000
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600
  template:
    spec:

      restartPolicy: OnFailure

      volumes:
        - name: init-data
          configMap:
            name: post-install-keycloak-config

      containers:
        - name: post-install
          image: quay.io/keycloak/keycloak:22.0.0
          imagePullPolicy: IfNotPresent

          env:
            - name: KEYCLOAK_ADMIN
              value: admin
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-admin
                  key: password

            - name: KEYCLOAK_URL
              value: http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80
              #value: http://trustification-staging-keycloak.trustification-staging.svc.cluster.local:80

            - name: KCADM_PATH
              value: /opt/keycloak/bin/kcadm.sh
            - name: INIT_DATA
              value: /etc/init-data

            - name: REALM
              value: chicken

            - name: CHICKEN_ADMIN
              value: admin
            - name: CHICKEN_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-realm-admin
                  key: password
            - name: REDIRECT_URIS
              value: {{ .Values.keycloakRealm.redirectUris | toJson | quote }}

          volumeMounts:
            - mountPath: /etc/init-data
              name: init-data

          command:
            # when making changes, sync with the init script in the compose deployment of the main repository
            - bash
            - -exc
            - |
              trap break INT

              kcadm() { local cmd="$1" ; shift ; "$KCADM_PATH" "$cmd" --config /tmp/kcadm.config "$@" ; }

              die() {
                  echo "$*" 1>&2
                  false
              }

              # TODO: once podman compose works, stop polling
              while ! kcadm config credentials config --server "$KEYCLOAK_URL" --realm master --user "$KEYCLOAK_ADMIN" --password "$KEYCLOAK_ADMIN_PASSWORD" &> /dev/null; do
                echo "Waiting for Keycloak to start up..."
                sleep 5
              done

              echo "Keycloak ready"

              # now we can do the actual work

              # create realm
              REALM_OPTS=()
              REALM_OPTS+=(-s enabled=true)
              REALM_OPTS+=(-s "displayName=Trusted Content")
              REALM_OPTS+=(-s registrationAllowed=true)
              REALM_OPTS+=(-s resetPasswordAllowed=true)
              REALM_OPTS+=(-s loginWithEmailAllowed=false)
              if kcadm get "realms/${REALM}" &> /dev/null ; then
                # exists -> update
                kcadm update "realms/${REALM}" "${REALM_OPTS[@]}"
              else
                # need to create
                kcadm create realms -s "realm=${REALM}" "${REALM_OPTS[@]}"
              fi

              # create realm roles
              kcadm create roles -r "${REALM}" -s name=chicken-user || true
              kcadm create roles -r "${REALM}" -s name=chicken-admin || true
              # add chicken-user as default role
              kcadm add-roles -r "${REALM}" --rname "default-roles-${REALM}" --rolename chicken-user

              # create clients - frontend
              ID=$(kcadm get clients -r "${REALM}" --query "clientId=frontend" --fields id --format csv --noquotes)
              CLIENT_OPTS=()
              CLIENT_OPTS+=(-s "redirectUris=${REDIRECT_URIS@Q}")
              if [[ -n "$ID" ]]; then
                # TODO: replace with update once https://github.com/keycloak/keycloak/issues/12484 is fixed
                # kcadm update "clients/${ID}" -r "${REALM}" -f /etc/init-data/client.json "${CLIENT_OPTS[@]}"
                kcadm delete "clients/${ID}" -r "${REALM}"
                kcadm create clients -r "${REALM}" -f "${INIT_DATA}/client-frontend.json" "${CLIENT_OPTS[@]}"
              else
                kcadm create clients -r "${REALM}" -f "${INIT_DATA}/client-frontend.json" "${CLIENT_OPTS[@]}"
              fi

              # create user
              ID=$(kcadm get users -r "${REALM}" --query "username=${CHICKEN_ADMIN}" --fields id --format csv --noquotes)
              if [[ -n "$ID" ]]; then
                kcadm update "users/$ID" -r "${REALM}" -s enabled=true
              else
                kcadm create users -r "${REALM}" -s "username=${CHICKEN_ADMIN}" -s enabled=true
              fi

              # set role
              kcadm add-roles -r "${REALM}" --uusername "${CHICKEN_ADMIN}" --rolename chicken-admin

              # set password
              ID=$(kcadm get users -r "${REALM}" --query "username=${CHICKEN_ADMIN}" --fields id --format csv --noquotes)
              kcadm update "users/${ID}/reset-password" -r "${REALM}" -s type=password -s "value=${CHICKEN_ADMIN_PASSWORD}" -s temporary=false -n

              echo SSO initialization complete
{{ end }}